apiVersion: v1
kind: Service
metadata:
  name: luttrellapp-server
  labels:
    app: web
    tier: backend
    role: master
spec:
  ports:
  - port: 8000
    targetPort: 8000
  selector:
    app: web
    tier: backend
    role: master
---
apiVersion: apps/v1 #  for k8s versions before 1.9.0 use apps/v1beta2  and before 1.8.0 use extensions/v1beta1
kind: Deployment
metadata:
  name: luttrellapp-server
spec:
  selector:
    matchLabels:
      app: web
      role: master
      tier: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
        role: master
        tier: backend
    spec:
      containers:
      - name: master
        image: luttrellapp:latest  # or just image: redis
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: web-task
  labels:
    app: web
    tier: backend
    role: slave
spec:
  ports:
  - port: 8000
  selector:
    app: redis
    tier: backend
    role: slave
---
apiVersion: apps/v1 #  for k8s versions before 1.9.0 use apps/v1beta2  and before 1.8.0 use extensions/v1beta1
kind: Deployment
metadata:
  name: web-task
spec:
  selector:
    matchLabels:
      app: web
      role: slave
      tier: backend
  replicas: 2
  template:
    metadata:
      labels:
        app: web
        role: slave
        tier: backend
    spec:
      containers:
      - name: task
        image: gcr.io/google_samples/gb-redisslave:v1
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access an environment variable to find the master
          # service's host, comment out the 'value: dns' line above, and
          # uncomment the line below:
          # value: env
        ports:
        - containerPort: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  labels:
    app: microblog
    tier: frontend
spec:
  # comment or delete the following line if you want to use a LoadBalancer
  type: NodePort 
  # if your cluster supports it, uncomment the following to automatically create
  # an external load-balanced IP for the frontend service.
  # type: LoadBalancer
  ports:
  - port: 80
  - port: 443
  selector:
    app: microblog
    tier: frontend
---
apiVersion: apps/v1 #  for k8s versions before 1.9.0 use apps/v1beta2  and before 1.8.0 use extensions/v1beta1
kind: Deployment
metadata:
  name: frontend
spec:
  selector:
    matchLabels:
      app: microblog
      tier: frontend
  replicas: 3
  template:
    metadata:
      labels:
        app: microblog
        tier: frontend
    spec:
      containers:
      - name: web-dns
        image: gcr.io/google-samples/gb-frontend:v4
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access environment variables to find service host
          # info, comment out the 'value: dns' line above, and uncomment the
          # line below:
          # value: env
        ports:
        - containerPort: 80
        - containerPort: 443